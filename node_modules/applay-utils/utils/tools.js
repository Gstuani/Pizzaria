const axios = require('axios');
const { Client } = require('pg')

var tools = {
  'csv2json':(csv)=>{
    var csvLinhas = csv.split('\n');
    var header = csvLinhas.shift().split(';');
    var dataCSv = csvLinhas.filter(e=>e!='').map(e=>e.split(';').reduce((n,p,i)=>{n[header[i]]=p;return n},{}))
    return dataCSv;
  },
  'json2csv': (jsonArray) => {
    if(jsonArray.length == 0){return '';};
    var csvList = [Object.keys(jsonArray[0]).join(';')];
    for (var item of jsonArray){
      csvList.push(Object.values(item).join(';'))
    }
    return csvList.join('\n');
  },
  'post':(url,data,headers)=>new Promise(resolve=>{
      axios.post(url, data, {headers:headers})
      .then((response)=>{
          resolve({status:true,data:response.data});
      })
      .catch((error)=>{
          resolve({status:false,error});
      });
  }),
  'get': (url, headers, config) => new Promise(resolve => {
    axios.get(url, Object.assign({ headers: headers }, config))
      .then((response) => {
        resolve({ status: true, data: response.data });
      })
      .catch((error) => {
        resolve({ status: false, error });
      });
  }),
  'psql':(acesso,query)=> new Promise(resolve=>{
    var client = new Client(acesso)
    client.connect()
    client.query(query, (err, res) => {
      if(err){
        resolve({status:false,err:err.stack})
      }else{
        resolve({status:true,data:res.rows});
      }
      client.end()
    })
  }),
  'convert': (data, tipo, param1, param2, param3)=>{
    //convert
    var moeda = param1;
    var digitos = param2;
    var max = param3 || 20;
    var locale = 'pt-BR'
    if (typeof param1 == 'number') {
      digitos = param1;
      moeda = null;
    }
    if (typeof param2 == 'number') {
      max = param2;
    }
    if (tipo == 'number' && moeda == 'us') {
      return parseFloat(data);
    }
    if (tipo == 'number' && moeda != 'us') {
      return parseFloat(('' + (data || '0')).split('.').join('').replace(',', '.').replace('R$', '').trim());
    }
    if (moeda == 'br') { moeda = 'R$'; locale = 'pt-BR'; digitos = 2; }
    if (moeda == 'virgula') { moeda = ''; locale = 'pt-BR'; digitos = 2; }
    if (moeda == 'us' || moeda == '$') { moeda = '$'; locale = 'en-US' }
    if (moeda == 'value') { moeda = false; locale = 'en-US' }

    if (tipo == 'valor' || tipo == 'texto') {
      var options = { maximumFractionDigits: max };
      if (digitos) {
        options.minimumFractionDigits = digitos;
      }
      var result = '' + data;

      if (locale == 'pt-BR') {
        if (!data) { data = 0; }
        result = data.toLocaleString(locale, options);
      }

      if (moeda) {
        result = moeda + ' ' + result;
      }
      return result;

    }
    return null;
  },
  /**
   * @param {number} milliseconds Valor em milisegundos para ser convertido
   * @returns Retorna uma string no formato **0h 0m 0s** ou retorna **--** em caso de erro
   */
  'findDistance': (posA, posB) => {
    let rad;
    function deg2rad(deg) {
      rad = deg * Math.PI / 180; // radians = degrees * pi/180
      return rad;
    }
    function round(x) {
      return Math.round(x * 1000) / 1000;
    }
    var Rm = 3961; // mean radius of the earth (miles) at 39 degrees from the equator
    var Rk = 6373; // mean radius of the earth (km) at 39 degrees from the equator
    var t1, n1, t2, n2, lat1, lon1, lat2, lon2, dlat, dlon, a, c, dm, dk, mi, km;

    // get values for lat1, lon1, lat2, and lon2
    t1 = posA.lat;
    n1 = posA.lng;
    t2 = posB.lat;
    n2 = posB.lng;

    // convert coordinates to radians
    lat1 = deg2rad(t1);
    lon1 = deg2rad(n1);
    lat2 = deg2rad(t2);
    lon2 = deg2rad(n2);

    // find the differences between the coordinates
    dlat = lat2 - lat1;
    dlon = lon2 - lon1;

    // here's the heavy lifting
    a = Math.pow(Math.sin(dlat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(dlon / 2), 2);
    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // great circle distance in radians
    dm = c * Rm; // great circle distance in miles
    dk = c * Rk; // great circle distance in km

    // round the results down to the nearest 1/1000
    mi = round(dm);
    km = round(dk);

    // display the result
    // frm.mi.value = mi;
    return km;
  }
}

module.exports = tools;