const ClientSFTP = require('ssh2-sftp-client');
const fs = require('fs');

var sftp = {
    'func': (func, options, params) => new Promise(async resolve => {
        console.log('sftp-func', func);
        var sftp = new ClientSFTP();
        sftp.connect(options)
            .catch(err => resolve({ status: false, err }))
            .then(async () => {
                let list;
                if (func == 'get') {
                    let destination = fs.createWriteStream(__dirname + params.output + '/' + params.filename);
                    await sftp.get(params.input + '' + params.filename, destination, { readStreamOptions: { encoding: 'utf-8' } });
                }
                if (func == 'list') { list = await sftp.list(params.input); }
                if (func == 'delete') { await sftp.delete(params.input + '' + params.filename, true); }
                if (func == 'put') { await sftp.put(__dirname + params.output + '/' + params.filename, params.input + '' + params.filename); }
                await sftp.end();
                resolve({ status: true, list })
            })
    }),
    'getDel':(options, params) => new Promise(async resolve => {
        let resultList = await utils.sftp.func('list', options, params);
        if (!resultList.status || !resultList.list.some(e => e.name == params.filename)) {
            return resolve({status:false,msg:'Arquivo n√£o encontrado na pasta '+params.filename});
        }
        let resultGet = await utils.sftp.func('get', options, params);
        if (!resultGet.status) {
            return resolve({status:false,msg:'Erro ao baixar arquivo '+params.filename});
        }
        let resultDelete = await utils.sftp.func('delete', options, params);
        if(!resultDelete.status){
            return resolve({status:resultDelete.status});
        }
        resolve({status:resultDelete.status});
    })
}