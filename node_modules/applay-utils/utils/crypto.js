var CryptoJS = require('crypto-js');
var algorithm = 'aes-256-cbc';
var key = process.env.key;
const sha1 = require('sha1');

var utils = {
    'genHash': (orig) => {
        if (!key) return null;
        var json = Object({}, orig);
        if (json._id) { delete json._id; }
        if (json.apyId) { delete json.apyId; }
        var block = `KEY=>${key}|JSON=>${JSON.stringify(json)}`;
        orig.apyId = sha1(block);
        return orig;
    },
    'verifyHash': (orig) => {
        if (!key) return null;
        var json = utils.genHash(Object({}, orig));
        console.log(json.apyId, orig.apyId);
        return json.apyId == orig.apyId
    },
    'setKey': (newkey)=>{key=newkey},
    'genIV': () => {
        return Math.random().toString(36).substr(2, 30);
    },
    'encrypt': (text, iv) => {
        if(!key) return null;
        let base = CryptoJS.AES.encrypt(text, key, { iv: iv });
        return base.toString();
    },
    'decrypt': (text, iv) => {
        if(!key) return null;
        let data = CryptoJS.AES.decrypt(text, key, { iv: iv }).toString(CryptoJS.enc.Utf8);
        return data;
    },
    'protect': (data) => {
        var iv = utils.genIV();
        return { cipher: utils.encrypt(JSON.stringify(data), iv), iv: iv, protect: true, app_key: '', app_secret: '' }
    },
    'extract': (data) => {
        if(!key) return null;
        return JSON.parse(utils.decrypt(data.cipher, data.iv));
    },
    'envelope': (dataFull) => {
        dataFull.data = utils.protect(dataFull.data);
        return dataFull;
    }
}

module.exports=utils;